// =============================
// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
// =============================
const tg = window.Telegram.WebApp;
tg.expand();
tg.ready();

// =============================
// Matter.js Setup
// =============================
const { Engine, Render, World, Bodies, Body, Composite, Events, Constraint } = Matter;

const width = window.innerWidth;
const height = window.innerHeight;

// –°–æ–∑–¥–∞–µ–º –¥–≤–∏–∂–æ–∫ –∏ —Ä–µ–Ω–¥–µ—Ä
const engine = Engine.create({
  gravity: { x: 0, y: 0.5 } // –≥—Ä–∞–≤–∏—Ç–∞—Ü–∏—è –≤–Ω–∏–∑, –∫–∞–∫ –≤ –ø–∏–Ω–±–æ–ª–µ
});

const render = Render.create({
  element: document.body,
  engine: engine,
  options: {
    width: width,
    height: height,
    wireframes: false,
    background: '#111',
    pixelRatio: window.devicePixelRatio || 1
  }
});

Render.run(render);
Engine.run(engine);

// =============================
// –ò–≥—Ä–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
// =============================
let score = 0;
let lives = 3;
let isGameOver = false;
let ball = null;

const scoreEl = document.getElementById('score');
const livesEl = document.getElementById('lives');
const gameOverEl = document.getElementById('game-over');
const finalScoreEl = document.getElementById('final-score');
const restartBtn = document.getElementById('restart-btn');

// =============================
// –°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–≥–æ –º–∏—Ä–∞
// =============================

function createWorld() {
  // –°—Ç–µ–Ω—ã
  const wallOptions = { isStatic: true, restitution: 0.9, render: { fillStyle: '#333' } };
  const walls = [
    Bodies.rectangle(width / 2, 0, width, 50, wallOptions), // –≤–µ—Ä—Ö
    Bodies.rectangle(0, height / 2, 50, height, wallOptions), // –ª–µ–≤–æ
    Bodies.rectangle(width, height / 2, 50, height, wallOptions), // –ø—Ä–∞–≤–æ
  ];

  // –ü–æ–ª ‚Äî —Å "–¥—ã—Ä–æ–π" –ø–æ—Å–µ—Ä–µ–¥–∏–Ω–µ, –∫—É–¥–∞ –º–æ–∂–µ—Ç —É–ø–∞—Å—Ç—å —à–∞—Ä–∏–∫
  const floorLeft = Bodies.rectangle(width * 0.25, height - 25, width * 0.45, 50, wallOptions);
  const floorRight = Bodies.rectangle(width * 0.75, height - 25, width * 0.45, 50, wallOptions);

  // –§–ª–∏–ø–ø–µ—Ä—ã (–ª–µ–≤—ã–π –∏ –ø—Ä–∞–≤—ã–π)
  const pivotY = height - 150;

  const leftFlipper = Bodies.rectangle(width * 0.3, pivotY, 120, 20, {
    isStatic: true,
    chamfer: { radius: 10 },
    render: { fillStyle: '#ff5722' }
  });

  const rightFlipper = Bodies.rectangle(width * 0.7, pivotY, 120, 20, {
    isStatic: true,
    chamfer: { radius: 10 },
    render: { fillStyle: '#ff5722' }
  });

  // –°–æ–∑–¥–∞–µ–º —à–∞—Ä–∏–∫
  ball = Bodies.circle(width / 2, 100, 15, {
    restitution: 0.8,
    frictionAir: 0.005,
    density: 0.001,
    render: { fillStyle: '#f00' }
  });

  // –ë—É—Ñ–µ—Ä—ã (bumper'—ã) ‚Äî –¥–∞—é—Ç –æ—á–∫–∏
  const bumpers = [
    Bodies.circle(width * 0.3, height * 0.3, 25, { isStatic: true, restitution: 1.2, render: { fillStyle: '#0ff' } }),
    Bodies.circle(width * 0.7, height * 0.3, 25, { isStatic: true, restitution: 1.2, render: { fillStyle: '#0ff' } }),
    Bodies.circle(width * 0.5, height * 0.5, 30, { isStatic: true, restitution: 1.3, render: { fillStyle: '#ff0' } }),
  ];

  // –†–∞–º–ø—ã –∏ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è
  const ramps = [
    Bodies.rectangle(width * 0.4, height * 0.7, 100, 20, { isStatic: true, angle: -0.3, render: { fillStyle: '#444' } }),
    Bodies.rectangle(width * 0.6, height * 0.7, 100, 20, { isStatic: true, angle: 0.3, render: { fillStyle: '#444' } }),
  ];

  // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å—ë –≤ –º–∏—Ä
  World.add(engine.world, [
    ...walls, floorLeft, floorRight,
    leftFlipper, rightFlipper,
    ball,
    ...bumpers,
    ...ramps
  ]);

  // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª—è —Ñ–ª–∏–ø–ø–µ—Ä–æ–≤ (—Ä—ã—á–∞–≥–∏)
  const leftPivot = Constraint.create({
    pointA: { x: width * 0.3 - 50, y: pivotY },
    bodyB: leftFlipper,
    pointB: { x: -55, y: 0 },
    stiffness: 1,
    length: 0
  });

  const rightPivot = Constraint.create({
    pointA: { x: width * 0.7 + 50, y: pivotY },
    bodyB: rightFlipper,
    pointB: { x: 55, y: 0 },
    stiffness: 1,
    length: 0
  });

  World.add(engine.world, [leftPivot, rightPivot]);

  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–ª–∏–ø–ø–µ—Ä–∞–º–∏
  document.addEventListener('keydown', (e) => {
    if (isGameOver) return;
    if (e.key === 'a' || e.key === 'ArrowLeft') {
      Body.setAngle(leftFlipper, -0.5);
      setTimeout(() => Body.setAngle(leftFlipper, 0), 200);
    }
    if (e.key === 'd' || e.key === 'ArrowRight') {
      Body.setAngle(rightFlipper, 0.5);
      setTimeout(() => Body.setAngle(rightFlipper, 0), 200);
    }
  });

  // –î–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö ‚Äî –∫–∞—Å–∞–Ω–∏—è –ø–æ –ª–µ–≤–æ–π/–ø—Ä–∞–≤–æ–π –ø–æ–ª–æ–≤–∏–Ω–µ —ç–∫—Ä–∞–Ω–∞
  document.addEventListener('touchstart', (e) => {
    if (isGameOver) return;
    const touchX = e.touches[0].clientX;
    if (touchX < width / 2) {
      Body.setAngle(leftFlipper, -0.5);
      setTimeout(() => Body.setAngle(leftFlipper, 0), 200);
    } else {
      Body.setAngle(rightFlipper, 0.5);
      setTimeout(() => Body.setAngle(rightFlipper, 0), 200);
    }
  });

  // –°—á—ë—Ç –ø—Ä–∏ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–∏ —Å –±—É—Ñ–µ—Ä–∞–º–∏
  Events.on(engine, 'collisionStart', (event) => {
    event.pairs.forEach(pair => {
      if (pair.bodyA === ball || pair.bodyB === ball) {
        const other = pair.bodyA === ball ? pair.bodyB : pair.bodyA;
        if (bumpers.includes(other)) {
          score += 50;
          scoreEl.innerText = `Score: ${score}`;
        }
      }
    });
  });

  // –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å–ª–∏ —à–∞—Ä–∏–∫ —É–ø–∞–ª –≤–Ω–∏–∑ (–º–µ–∂–¥—É –ø–æ–ª–∞–º–∏)
  Events.on(engine, 'afterUpdate', () => {
    if (ball.position.y > height + 50) {
      loseLife();
    }
  });
}

// =============================
// –ñ–∏–∑–Ω–∏ –∏ Game Over
// =============================

function loseLife() {
  lives--;
  livesEl.innerText = `Lives: ${lives}`;
  if (lives <= 0) {
    gameOver();
  } else {
    resetBall();
  }
}

function resetBall() {
  Body.setPosition(ball, { x: width / 2, y: 100 });
  Body.setVelocity(ball, { x: 0, y: 0 });
}

function gameOver() {
  isGameOver = true;
  finalScoreEl.innerText = score;
  gameOverEl.classList.remove('hidden');

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ Telegram
  tg.MainButton
    .setParams({ text: `üéØ Your Score: ${score}`, color: '#ff5722' })
    .show()
    .onClick(() => {
      tg.sendData(JSON.stringify({ score: score, userId: tg.initDataUnsafe?.user?.id }));
      tg.close();
    });
}

restartBtn.addEventListener('click', () => {
  location.reload(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã
});

// =============================
// –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã
// =============================
createWorld();
scoreEl.innerText = `Score: ${score}`;
livesEl.innerText = `Lives: ${lives}`;

// –ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ–¥ —Ä–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞
window.addEventListener('resize', () => {
  render.options.width = window.innerWidth;
  render.options.height = window.innerHeight;
  render.canvas.width = window.innerWidth;
  render.canvas.height = window.innerHeight;
});

// =============================
// –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –∑–≤—É–∫–∏ (–µ—Å–ª–∏ –¥–æ–±–∞–≤–∏—à—å –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã)
// =============================
/*
const flipSound = new Audio('assets/flip.mp3');
const bumpSound = new Audio('assets/bump.mp3');
flipSound.volume = 0.3;
bumpSound.volume = 0.2;

// –í –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö:
flipSound.cloneNode().play(); // —á—Ç–æ–±—ã –∑–≤—É–∫–∏ –Ω–µ –ø–µ—Ä–µ–±–∏–≤–∞–ª–∏ –¥—Ä—É–≥ –¥—Ä—É–≥–∞
*/